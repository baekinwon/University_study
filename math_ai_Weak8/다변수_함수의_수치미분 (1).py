# -*- coding: utf-8 -*-
"""다변수 함수의 수치미분.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fz-XCKpoern2XxHIbGNfRSnDWv-i1NoH
"""

import numpy as np

def numerical_derivative(f,x): # f는 미분하고자 하는 다변수 함수, x는 모든 변수를 포함하고 있는 numpy 객체(배열, 행렬)등
    delta_x = 1e-5 #lim에 해당되는 작은 값
    grad = np.zeros_like(x) # 계산된 수치미분 값 저장 변수
    it = np.nditer(x, flags =['multi_index'],op_flags=['readwrite'])# 모든 입력변수에 대해 편미분하기 위해 사용
    while not it.finished:
        idx = it.multi_index
        tmp_x = x[idx] # numpy 타입은 mutable이므로 원래 값 보관
        x[idx] = float(tmp_x)+delta_x #하나의 변수에 대해 수치미분 계산
        fx1 = f(x) # f(x+delta_x)

        x[idx] = tmp_x - delta_x
        fx2=f(x) # f(x-delta_x)
        grad[idx] = (fx1-fx2)/(2*delta_x)

        x[idx] = tmp_x
        it.iternext()

    return grad

# 2변수 함수
import numpy as np

def numerical_derivative(f,x): # f는 미분하고자 하는 다변수 함수, x는 모든 변수를 포함하고 있는 numpy 객체(배열, 행렬)등
    delta_x = 1e-5 #lim에 해당되는 작은 값
    grad = np.zeros_like(x) # 계산된 수치미분 값 저장 변수
    print("debug1 . initial input variable =",x)
    print("debug2 . initial grad =",grad)
    print("======================================")
    it = np.nditer(x, flags =['multi_index'],op_flags=['readwrite'])# 모든 입력변수에 대해 편미분하기 위해 사용
    while not it.finished:
        idx = it.multi_index  # x에대한 편미분 후 y에 대한 편미분 실행  [1.0,2.0]이라면 1.0 편미분 후 2.0 편미분
        
        print("debug3 . idx=",idx,", x[idx] = ",x[idx])

        tmp_x = x[idx] # numpy 타입은 mutable이므로 원래 값 보관
        x[idx] = float(tmp_x)+delta_x #하나의 변수에 대해 수치미분 계산
        fx1 = f(x) # f(x+delta_x) 전체에 대해 계산해야 하기 때문에 x[idx]가 아닌 x를 넣어줌

        x[idx] = tmp_x - delta_x
        fx2=f(x) # f(x-delta_x)
        grad[idx] = (fx1-fx2)/(2*delta_x)

        print("debug4 . grad[idx] =",grad[idx])
        print("debug5 . grad =",grad)
        print("======================================")
        x[idx] = tmp_x
        it.iternext()

    return grad

def func4(input_obj):
    x = input_obj[0]
    y = input_obj[1]
    return 2*x+3*x*y+np.power(y,3)


input = np.array([1.0,2.0])
result = numerical_derivative(func4,input)
print(result)

# 4변수 함수

import numpy as np

def numerical_derivative(f,x): # f는 미분하고자 하는 다변수 함수, x는 모든 변수를 포함하고 있는 numpy 객체(배열, 행렬)등
    delta_x = 1e-5 #lim에 해당되는 작은 값
    grad = np.zeros_like(x) # 계산된 수치미분 값 저장 변수
    print("debug1 . initial input variable =",x)
    print("debug2 . initial grad =",grad)
    print("======================================")
    it = np.nditer(x, flags =['multi_index'],op_flags=['readwrite'])# 모든 입력변수에 대해 편미분하기 위해 사용
    while not it.finished:
        idx = it.multi_index  # x에대한 편미분 후 y에 대한 편미분 실행  [1.0,2.0]이라면 1.0 편미분 후 2.0 편미분
        
        print("debug3 . idx=",idx,", x[idx] = ",x[idx])

        tmp_x = x[idx] # numpy 타입은 mutable이므로 원래 값 보관
        x[idx] = float(tmp_x)+delta_x #하나의 변수에 대해 수치미분 계산
        fx1 = f(x) # f(x+delta_x)

        x[idx] = tmp_x - delta_x
        fx2=f(x) # f(x-delta_x)
        grad[idx] = (fx1-fx2)/(2*delta_x)

        print("debug4 . grad[idx] =",grad[idx])
        print("debug5 . grad =",grad)
        print("======================================")
        x[idx] = tmp_x
        it.iternext()

    return grad

def func5(input_obj):
    w = input_obj[0,0]
    x = input_obj[0,1]
    y = input_obj[1,0]
    z = input_obj[1,1]
    return w*x+x*y*z+3*w+z*np.power(y,2)


input = np.array([[1.0,2.0],[3.0,4.0]])
result = numerical_derivative(func5,input)
print(result)